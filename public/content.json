{"meta":{"title":"Day Day Up","subtitle":"Don't just promise, Prove; Don't just dream, Do! Things could be easier say it verbally than write it out!","description":"Things could be easier say it verbally than write it out","author":"Alex Man","url":"https://zman-hz.github.io","root":"/"},"pages":[{"title":"About","date":"2020-08-18T02:18:30.000Z","updated":"2020-08-21T11:10:48.801Z","comments":true,"path":"about/index.html","permalink":"https://zman-hz.github.io/about/index.html","excerpt":"","text":"关于我/About Me Everything you’ve ever done was done by a younger, more hopeful you who you no longer are; Everything you aspire to do needs to be done by an older, more experienced you who you are not yet! Story could be easier say it verbally than write it out! Do not just promise, Prove; Do not jsut dream, Do! Be prepared for more, be successful in all. 本博客初衷是：备忘学习中遇到的问题，及日常笔记作用。"},{"title":"文章分类","date":"2020-08-18T02:18:44.000Z","updated":"2020-08-20T12:12:01.101Z","comments":true,"path":"categories/index.html","permalink":"https://zman-hz.github.io/categories/index.html","excerpt":"","text":""},{"title":"repository","date":"2020-08-18T02:19:06.000Z","updated":"2020-08-18T02:19:57.015Z","comments":false,"path":"repository/index.html","permalink":"https://zman-hz.github.io/repository/index.html","excerpt":"","text":""},{"title":"links","date":"2020-08-18T02:18:51.000Z","updated":"2020-08-21T13:38:08.256Z","comments":true,"path":"links/index.html","permalink":"https://zman-hz.github.io/links/index.html","excerpt":"","text":"Coding 部署博客 https://1qh40q.coding-pages.com/"},{"title":"标签云","date":"2020-08-18T02:19:15.000Z","updated":"2020-08-20T13:32:10.602Z","comments":true,"path":"tags/index.html","permalink":"https://zman-hz.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Oracle CDB PDB 表空间创建用户及角色","slug":"Oracle-CDB-PDB-表空间创建用户及角色","date":"2020-08-25T13:39:31.000Z","updated":"2020-08-29T13:39:30.223Z","comments":true,"path":"2020/08/25/Oracle-CDB-PDB-表空间创建用户及角色/","link":"","permalink":"https://zman-hz.github.io/2020/08/25/Oracle-CDB-PDB-%E8%A1%A8%E7%A9%BA%E9%97%B4%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%8F%8A%E8%A7%92%E8%89%B2/","excerpt":"记录如何使用11g以上版本oracle","text":"记录如何使用11g以上版本oracle 在进行如下操作之前，需保证Docker在running，然后启动ORACLE 登录ORACLE 1docker container ls 1docker exec -it 3024386a1d24 /bin/bash 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879dockerfiles [remotes/origin/revert-1451-ssl_enable~53] % docker container lsCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES3024386a1d24 oracle/database:12.2.0.1-ee &quot;/bin/sh -c &#x27;exec $O…&quot; 43 minutes ago Up About a minute (healthy) 0.0.0.0:1521-&gt;1521/tcp, 0.0.0.0:5500-&gt;5500/tcp oracledockerfiles [remotes/origin/revert-1451-ssl_enable~53] % docker exec -it 3024386a1d24 /bin/bash[oracle@3024386a1d24 ~]$ sqlplus / as sysdbaSQL*Plus: Release 12.2.0.1.0 Production on Sat Aug 29 12:32:19 2020Copyright (c) 1982, 2016, Oracle. All rights reserved.ERROR:ORA-12162: TNS:net service name is incorrectly specifiedEnter user-name: ^C^C^C[oracle@3024386a1d24 ~]$ [oracle@3024386a1d24 ~]$ [oracle@3024386a1d24 ~]$ [oracle@3024386a1d24 ~]$ ps -ef | grep ora_oracle 23 1 0 12:30 ? 00:00:00 ora_pmon_ORCLCDBoracle 25 1 0 12:30 ? 00:00:00 ora_clmn_ORCLCDBoracle 27 1 0 12:30 ? 00:00:00 ora_psp0_ORCLCDBoracle 29 1 0 12:30 ? 00:00:00 ora_vktm_ORCLCDBoracle 33 1 0 12:30 ? 00:00:00 ora_gen0_ORCLCDBoracle 35 1 0 12:30 ? 00:00:00 ora_mman_ORCLCDBoracle 39 1 0 12:30 ? 00:00:00 ora_gen1_ORCLCDBoracle 43 1 0 12:30 ? 00:00:00 ora_diag_ORCLCDBoracle 45 1 0 12:30 ? 00:00:00 ora_ofsd_ORCLCDBoracle 49 1 0 12:30 ? 00:00:00 ora_dbrm_ORCLCDBoracle 51 1 0 12:30 ? 00:00:00 ora_vkrm_ORCLCDBoracle 53 1 0 12:30 ? 00:00:00 ora_svcb_ORCLCDBoracle 55 1 0 12:30 ? 00:00:00 ora_pman_ORCLCDBoracle 57 1 0 12:30 ? 00:00:00 ora_dia0_ORCLCDBoracle 59 1 0 12:30 ? 00:00:00 ora_dbw0_ORCLCDBoracle 61 1 0 12:30 ? 00:00:00 ora_lgwr_ORCLCDBoracle 63 1 0 12:30 ? 00:00:00 ora_ckpt_ORCLCDBoracle 65 1 0 12:30 ? 00:00:00 ora_lg00_ORCLCDBoracle 67 1 0 12:30 ? 00:00:00 ora_smon_ORCLCDBoracle 69 1 0 12:30 ? 00:00:00 ora_lg01_ORCLCDBoracle 71 1 0 12:30 ? 00:00:00 ora_smco_ORCLCDBoracle 73 1 0 12:30 ? 00:00:00 ora_reco_ORCLCDBoracle 75 1 0 12:30 ? 00:00:00 ora_w000_ORCLCDBoracle 77 1 0 12:30 ? 00:00:00 ora_lreg_ORCLCDBoracle 79 1 0 12:30 ? 00:00:00 ora_w001_ORCLCDBoracle 81 1 0 12:30 ? 00:00:00 ora_pxmn_ORCLCDBoracle 85 1 0 12:30 ? 00:00:01 ora_mmon_ORCLCDBoracle 87 1 0 12:30 ? 00:00:00 ora_mmnl_ORCLCDBoracle 89 1 0 12:30 ? 00:00:00 ora_d000_ORCLCDBoracle 91 1 0 12:30 ? 00:00:00 ora_s000_ORCLCDBoracle 93 1 0 12:30 ? 00:00:00 ora_tmon_ORCLCDBoracle 103 1 0 12:30 ? 00:00:00 ora_tt00_ORCLCDBoracle 105 1 0 12:30 ? 00:00:00 ora_tt01_ORCLCDBoracle 107 1 0 12:30 ? 00:00:00 ora_tt02_ORCLCDBoracle 109 1 0 12:30 ? 00:00:00 ora_aqpc_ORCLCDBoracle 113 1 0 12:30 ? 00:00:00 ora_p000_ORCLCDBoracle 115 1 0 12:30 ? 00:00:00 ora_p001_ORCLCDBoracle 117 1 0 12:30 ? 00:00:00 ora_p002_ORCLCDBoracle 119 1 0 12:30 ? 00:00:00 ora_p003_ORCLCDBoracle 121 1 0 12:30 ? 00:00:00 ora_p004_ORCLCDBoracle 123 1 0 12:30 ? 00:00:00 ora_p005_ORCLCDBoracle 125 1 0 12:30 ? 00:00:00 ora_p006_ORCLCDBoracle 127 1 0 12:30 ? 00:00:00 ora_p007_ORCLCDBoracle 129 1 0 12:30 ? 00:00:00 ora_p008_ORCLCDBoracle 131 1 0 12:30 ? 00:00:00 ora_p009_ORCLCDBoracle 133 1 0 12:30 ? 00:00:00 ora_p00a_ORCLCDBoracle 135 1 0 12:30 ? 00:00:00 ora_p00b_ORCLCDBoracle 137 1 0 12:30 ? 00:00:00 ora_p00c_ORCLCDBoracle 139 1 0 12:30 ? 00:00:00 ora_p00d_ORCLCDBoracle 141 1 0 12:30 ? 00:00:00 ora_p00e_ORCLCDBoracle 143 1 0 12:30 ? 00:00:00 ora_p00f_ORCLCDBoracle 286 1 1 12:30 ? 00:00:01 ora_cjq0_ORCLCDBoracle 368 1 0 12:30 ? 00:00:00 ora_qm02_ORCLCDBoracle 372 1 0 12:30 ? 00:00:00 ora_q002_ORCLCDBoracle 374 1 0 12:30 ? 00:00:00 ora_q003_ORCLCDBoracle 376 1 0 12:30 ? 00:00:00 ora_q004_ORCLCDBoracle 411 1 0 12:31 ? 00:00:00 ora_w002_ORCLCDBoracle 464 412 0 12:32 pts/0 00:00:00 grep --color=auto ora_[oracle@3024386a1d24 ~]$ export ORACLE_SID=ORCLCDB[oracle@3024386a1d24 ~]$ sqlplus / as sysdba 修改Sys/System的密码 修改密码是便于自己使用跟设置SqlDeveloper，使用JDBC 1ALTER USER sys IDENTIFIED BY YOURPASSWORD 预备知识 需要知道CDB跟PDB是怎么回事，Oracle 12C引入了CDB与PDB的新特性，在ORACLE 12C数据库引入的多租用户环境（Multitenant Environment）中，允许一个数据库容器（CDB）承载多个可插拔数据库（PDB）。CDB全称为Container Database，中文翻译为数据库容器，PDB全称为Pluggable Database，即可插拔数据库。在ORACLE 12C之前，实例与数据库是一对一或多对一关系（RAC）：即一个实例只能与一个数据库相关联，数据库可以被多个实例所加载。而实例与数据库不可能是一对多的关系。当进入ORACLE 12C后，实例与数据库可以是一对多的关系。下面是官方文档关于CDB与PDB的关系图 其实大家如果对SQL SERVER比较熟悉的话，这种CDB与PDB是不是感觉和SQL SERVER的单实例多数据库架构是一回事呢。像PDB$SEED可以看成是master、msdb等系统数据库，PDBS可以看成用户创建的数据库。而可插拔的概念与SQL SERVER中的用户数据库的分离、附加其实就是那么一回事。看来ORACLE也“抄袭”了一把SQL SERVER的概念，只是改头换面的包装了一番。 CDB组件（Components of a CDB） 一个CDB数据库容器包含了下面一些组件： ROOT组件： ROOT又叫CDB$ROOT, 存储着ORACLE提供的元数据和Common User,元数据的一个例子是ORACLE提供的PL/SQL包的源代码，Common User 是指在每个容器中都存在的用户。 SEED组件： Seed又叫PDB$SEED,这个是你创建PDBS数据库的模板，你不能在Seed中添加或修改一个对象。一个CDB中有且只能有一个Seed. 这个感念，个人感觉非常类似SQL SERVER中的model数据库。 PDBS： CDB中可以有一个或多个PDBS，PDBS向后兼容，可以像以前在数据库中那样操作PDBS，这里指大多数常规操作。 这些组件中的每一个都可以被称为一个容器。因此，ROOT(根)是一个容器，Seed(种子)是一个容器，每个PDB是一个容器。每个容器在CDB中都有一个独一无二的的ID和名称。 查看当前容器 12345sql&gt; SHOW CON_NAME;CON_NAME ------------------------------CDB$ROOT 查看CDB中可用的PDB 1234sql&gt; SELECT CON_ID,DBID,NAME,OPEN_MODEFROM V$PDBS; 切换至PDB 因为sql开发是需要在PDB上进行，所以需要切换至PDB中，只写两种方式，其中方式1是笔者常用 方式1: 1ALTER SESSION SET CONTAINER = ORCLPDB1; 方式2: 1alter pluggable database ORCLPDB1 open;; 使用SqlDeveloper 方便写sql开发 配置SqlDeveloper 为了区分，建议按DB类型进行分开, cdb的用户名跟密码是可以登录pdb的，下面都可以使用前面设置好的sys的用户名，当然你也可以只登录到CDB，然后使用上面的切换方式 使用Basic类型配置CDB 注意正确选择Role 注：图中的Service name/SID（当前是一样的） 就是你在上面命令行中export的ORACLE_SID 使用Basic类型配置PDB 使用JDBC配置PDB/CDB 只需要把上图中的Connection Type改成Advanced JDBC URL: 1jdbc:oracle:thin:@localhost:1521/orclpdb1","categories":[{"name":"ORACLE","slug":"ORACLE","permalink":"https://zman-hz.github.io/categories/ORACLE/"}],"tags":[{"name":"ORACLE","slug":"ORACLE","permalink":"https://zman-hz.github.io/tags/ORACLE/"},{"name":"TABLESPACE","slug":"TABLESPACE","permalink":"https://zman-hz.github.io/tags/TABLESPACE/"},{"name":"SCHEMA","slug":"SCHEMA","permalink":"https://zman-hz.github.io/tags/SCHEMA/"},{"name":"ROLE","slug":"ROLE","permalink":"https://zman-hz.github.io/tags/ROLE/"}]},{"title":"Docker创建镜像并上传到Docker Hub","slug":"Docker创建镜像并上传到Docker-Hub","date":"2020-08-20T12:52:41.000Z","updated":"2020-08-20T13:47:10.013Z","comments":true,"path":"2020/08/20/Docker创建镜像并上传到Docker-Hub/","link":"","permalink":"https://zman-hz.github.io/2020/08/20/Docker%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F%E5%B9%B6%E4%B8%8A%E4%BC%A0%E5%88%B0Docker-Hub/","excerpt":"介绍如何实现自己build一个Docker image，然后push到自己到Docker Hub中的过程。","text":"介绍如何实现自己build一个Docker image，然后push到自己到Docker Hub中的过程。 准备工作 需要自己注册一个Docker Hub的账号。 URL： https://hub.docker.com/ Step 1，启动Docker 启动docker，保持其running状态 Step 2，login 新建一个命令行窗口 1docker login Step 3 查看容器 1docker ps -a Step 4 选择要生成镜像的容器ID（CONTAINER ID) 1docker commit #&#123;CONTAINER ID&#125; yourImageName Step 5 查看生产的镜像 1docker images Step 6 修改镜像指向自己的Docker Hub 1docker tag #&#123;IMAGE ID&#125; dockerHub用户名/dockerHub仓库名:tag 命令行中用户名和仓库名，对应自己Docker Hub的用户名及仓库名，最后冒号后的tag是你要打的tag Step 7 push镜像至Docker Hub 1docker push dockerHub用户名/dockerHub仓库名:tag标签 经过如上步骤，便可以在自己的Docker Hub上看到刚刚push上来的镜像了","categories":[{"name":"Docker","slug":"Docker","permalink":"https://zman-hz.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://zman-hz.github.io/tags/Docker/"},{"name":"Docker Hub","slug":"Docker-Hub","permalink":"https://zman-hz.github.io/tags/Docker-Hub/"}]},{"title":"如何在MacOS上使用Docker安装Oracle","slug":"如何在MacOS上使用Docker安装Oracle","date":"2020-08-19T13:10:24.000Z","updated":"2020-08-29T12:59:37.246Z","comments":true,"path":"2020/08/19/如何在MacOS上使用Docker安装Oracle/","link":"","permalink":"https://zman-hz.github.io/2020/08/19/%E5%A6%82%E4%BD%95%E5%9C%A8MacOS%E4%B8%8A%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Oracle/","excerpt":"本篇文章旨在备忘当初是如何在自己的Mac上安装并使用Oracle的。","text":"本篇文章旨在备忘当初是如何在自己的Mac上安装并使用Oracle的。 前期准备工作 由于自己的电脑是Mac，并且在工作中也是一直使用Oracle，但是难受的地方是，商业化做的不错的oracle竟然没有MacOS的安装包。兵来将挡，水来土堰，办法总比困难多，想办法解决呀！ Step 1 clone/下载Oracle的Docker镜像 主要是需要oracle的Dockerfile， get docker images here: https://github.com/oracle/docker-images 下载完成后，进入你刚刚下载完成的路径中，如下代码： 1cd docker-images/OracleDatabase/SingleInstance/dockerfiles Step 2 下载Oracle的数据库的instance 链接URL： http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html download an oracle database and place it in the equvilent version folder, such as 12.2.0.1, then run below command. 下载的时候需要有Oracle账户，相信即便没有，申请也很容易。 开始安装 下载完成后，把下载的zip包放到 Step1.1 对应版本号的文件中，比如你下载的是12.2.0.1版本的，然后使用如下命令： 1./buildDockerImage.sh -v 12.2.0.1 -e 此步骤比较耗时，大概有24个步骤要跑。要耐心等待，如果出现链接超时的情况，基本就是第7/10步的时候。强烈建议你早晨早点起床，肯定就能秒过，不要问为什么，实践出真知。哈哈哈哈 Step 3 安装oracle instance并映射Docker中的端口及数据文件到本地端口及本地路径 map to local port and data file 注意修改命令行中的路径(第一个冒号之前的路径) 1docker run --name oracle -p 1521:1521 -p 5500:5500 -v /Users/$&#123;user&#125;/idocker/oradata:/opt/oracle/oradata oracle/database:12.2.0.1-ee 注意数据文件已经map到 （/你上面指定路径/oradata）下。此时就算你删除了container，这些数据文件还是会被保留的。 对应的log如下，注意到了最后，会停在那里，估计run命令最后调用类似docker logs -f oracle这样的命令，会tail -f类似的输出，所以我们可以直接新建一个窗口使用了 1docker stop oracle 再 1docker start oracle 如果不想敲命令行启动oracle，你也可以使用Docker的Dashboard来点点鼠标就可以了。 经过如上步骤之后，如果没错误，Oracle就是成功安装了。 因为是使用的Oracle 12 以上版本，所以你需要了解Oracle的Container Database（CDB） 跟 Plugable Database（PDB）的区别。 参考log如下： 1234567891011121314151617181920212223242526272829303132333435$ docker run --name oracle -p 1521:1521 -p 5500:5500 -v /Users/example/oradata:/opt/oracle/oradata oracle/database:12.2.0.1-eeORACLE PASSWORD FOR SYS, SYSTEM AND PDBADMIN: scXX7Cj+1m0=1 LSNRCTL for Linux: Version 12.2.0.1.0 - Production on 20-MAY-2017 14:25:30 Copyright (c) 1991, 2016, Oracle. All rights reserved. Starting /opt/oracle/product/12.2.0.1/dbhome_1/bin/tnslsnr: please wait... TNSLSNR for Linux: Version 12.2.0.1.0 - ProductionSystem parameter file is /opt/oracle/product/12.2.0.1/dbhome_1/network/admin/listener.oraLog messages written to /opt/oracle/diag/tnslsnr/c9f09116cc83/listener/alert/log.xmlListening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1)))Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=0.0.0.0)(PORT=1521))) …… SQL&gt; Disconnected from Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production#########################DATABASE IS READY TO USE!#########################The following output is now a tail of the alert.log:Completed: alter pluggable database ORCLPDB1 open2017-05-20T14:31:25.862061+00:00ORCLPDB1(3):CREATE SMALLFILE TABLESPACE &quot;USERS&quot; LOGGING DATAFILE &#x27;/opt/oracle/oradata/ORCLCDB/ORCLPDB1/users01.dbf&#x27; SIZE 5M REUSE AUTOEXTEND ON NEXT 1280K MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL SEGMENT SPACE MANAGEMENT AUTOORCLPDB1(3):Completed: CREATE SMALLFILE TABLESPACE &quot;USERS&quot; LOGGING DATAFILE &#x27;/opt/oracle/oradata/ORCLCDB/ORCLPDB1/users01.dbf&#x27; SIZE 5M REUSE AUTOEXTEND ON NEXT 1280K MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL SEGMENT SPACE MANAGEMENT AUTOORCLPDB1(3):ALTER DATABASE DEFAULT TABLESPACE &quot;USERS&quot;ORCLPDB1(3):Completed: ALTER DATABASE DEFAULT TABLESPACE &quot;USERS&quot;2017-05-20T14:31:26.657295+00:00ALTER SYSTEM SET control_files=&#x27;/opt/oracle/oradata/ORCLCDB/control01.ctl&#x27; SCOPE=SPFILE; ALTER PLUGGABLE DATABASE ORCLPDB1 SAVE STATECompleted: ALTER PLUGGABLE DATABASE ORCLPDB1 SAVE STATE 2017-05-20T14:41:16.140414+00:00ORCLPDB1(3):Resize operation completed for file# 10, old size 337920K, new size 358400K Build好的Oracle push到远程Docker Hub 当然你build好的镜像也是可以push到自己的Docker Hub中，我私人的Docker Hub如下： https://hub.docker.com/repository/docker/zhenzhenman/oracle12 至于如何操作以及Oracle的CDB和PDB，TableSpace等等，请看下回分解。。。","categories":[{"name":"MacOS","slug":"MacOS","permalink":"https://zman-hz.github.io/categories/MacOS/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://zman-hz.github.io/tags/Docker/"},{"name":"MacOS","slug":"MacOS","permalink":"https://zman-hz.github.io/tags/MacOS/"},{"name":"Oracle","slug":"Oracle","permalink":"https://zman-hz.github.io/tags/Oracle/"}]},{"title":"MacOS如何显示隐藏文件","slug":"MacOS如何显示隐藏文件","date":"2020-08-19T12:26:53.000Z","updated":"2020-08-19T12:32:12.485Z","comments":true,"path":"2020/08/19/MacOS如何显示隐藏文件/","link":"","permalink":"https://zman-hz.github.io/2020/08/19/MacOS%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/","excerpt":"MacOS上的隐藏文件都是以.(点)开头的文件夹或者文件，不像windows那样可以通过设置属性来使其隐藏。","text":"MacOS上的隐藏文件都是以.(点)开头的文件夹或者文件，不像windows那样可以通过设置属性来使其隐藏。 显示隐藏文件 12defaults write com.apple.finder AppleShowAllFiles -bool true;KillAll Finder 不显示隐藏文件 12defaults write com.apple.finder AppleShowAllFiles -bool false;KillAll Finder","categories":[{"name":"OS技巧","slug":"OS技巧","permalink":"https://zman-hz.github.io/categories/OS%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"https://zman-hz.github.io/tags/MacOS/"},{"name":"隐藏文件","slug":"隐藏文件","permalink":"https://zman-hz.github.io/tags/%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/"},{"name":"Hidden File","slug":"Hidden-File","permalink":"https://zman-hz.github.io/tags/Hidden-File/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-08-19T12:26:53.000Z","updated":"2020-08-21T10:50:54.306Z","comments":true,"path":"2020/08/19/hello-world/","link":"","permalink":"https://zman-hz.github.io/2020/08/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"ORACLE","slug":"ORACLE","permalink":"https://zman-hz.github.io/categories/ORACLE/"},{"name":"Docker","slug":"Docker","permalink":"https://zman-hz.github.io/categories/Docker/"},{"name":"MacOS","slug":"MacOS","permalink":"https://zman-hz.github.io/categories/MacOS/"},{"name":"OS技巧","slug":"OS技巧","permalink":"https://zman-hz.github.io/categories/OS%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"ORACLE","slug":"ORACLE","permalink":"https://zman-hz.github.io/tags/ORACLE/"},{"name":"TABLESPACE","slug":"TABLESPACE","permalink":"https://zman-hz.github.io/tags/TABLESPACE/"},{"name":"SCHEMA","slug":"SCHEMA","permalink":"https://zman-hz.github.io/tags/SCHEMA/"},{"name":"ROLE","slug":"ROLE","permalink":"https://zman-hz.github.io/tags/ROLE/"},{"name":"Docker","slug":"Docker","permalink":"https://zman-hz.github.io/tags/Docker/"},{"name":"Docker Hub","slug":"Docker-Hub","permalink":"https://zman-hz.github.io/tags/Docker-Hub/"},{"name":"MacOS","slug":"MacOS","permalink":"https://zman-hz.github.io/tags/MacOS/"},{"name":"Oracle","slug":"Oracle","permalink":"https://zman-hz.github.io/tags/Oracle/"},{"name":"隐藏文件","slug":"隐藏文件","permalink":"https://zman-hz.github.io/tags/%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/"},{"name":"Hidden File","slug":"Hidden-File","permalink":"https://zman-hz.github.io/tags/Hidden-File/"}]}